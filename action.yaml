name: 'Debug via SSH test'
description: 'SSH to a GitHub Actions runner using nps'
branding:
  icon: 'terminal'
  color: 'green'
inputs:
  SSH_PASSWORD:
    description: 'Password for SSH session'
    required: true
  NPS_VKEY:
    description: 'verification key for nps'
    required: true
  NPS_SERVER:
    description: 'nps server address(ip:port)'
    required: true
  NPS_TIMEOUT:
    description: 'Timeout in seconds for nps session'
    default: 86400
runs:
  using: "composite"
  steps:
    - name: Check inputs
      run: |
        if [ -z "${{ inputs.SSH_PASSWORD }}" ]
        then
          echo "SSH_PASSWORD needs to be passed in the 'with' field."
          exit 1
        fi

        if [ -z "${{ inputs.NPS_SERVER }}" ]
        then
          echo "NPS_SERVER needs to be passed in the 'with' field."
          exit 1
        fi

        if [ -z "${{ inputs.NPS_VKEY }}" ]
        then
          echo "NPS_VKEY needs to be passed in the 'with' field."
          exit 1
        fi
      shell: bash
    - name: Change SSH password for Linux
      if: ${{ runner.os == 'Linux' }}
      run: |
        echo "# Change the SSH user password"
        set -x
        echo $(whoami)
        sudo passwd $(whoami) << EOF
        ${{ inputs.SSH_PASSWORD }}
        ${{ inputs.SSH_PASSWORD }}
        EOF
        WORK_DIR=$(pwd)
        echo "cd $WORK_DIR" >> ~/.bashrc
        echo '. .bashrc' >> ~/.bash_profile
      shell: bash
    - name: Change SSH password for MacOS
      if: ${{ runner.os == 'macOS' }}
      run: |
        echo "# Change the SSH user password"
        echo 'PermitRootLogin yes' | sudo tee -a /etc/ssh/sshd_config >/dev/null
        sudo launchctl unload /System/Library/LaunchDaemons/ssh.plist
        sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist
        echo "${{ inputs.SSH_PASSWORD }}`n${{ inputs.SSH_PASSWORD }}" | sudo passwd "root"
        $env:WORK_DIR=(Get-Item -Path '.\' -Verbose).FullName
        sudo chmod 777 /var/root
        sudo echo "" >> /var/root/.bash_profile
        sudo echo "cd $env:WORK_DIR" >> /var/root/.bash_profile
      shell: pwsh
    - name: Install SSH server for Windows
      if: ${{ runner.os == 'Windows' }}
      run: |
        $env:WORK_DIR=(Get-Item -Path '.\' -Verbose).FullName
        echo "cd /d $env:WORK_DIR" > ~/init.cmd
        #reg add "HKLM\Software\Microsoft\Command Processor" /v "AutoRun" /t REG_SZ /d "$env:WORK_DIR\init.cmd" /f
        cd ~
        echo "# Install npc"
        echo "# Install SSH server"
          curl https://dl.bitvise.com/BvSshServer-Inst.exe --output BvSshServer-Inst.exe
          .\BvSshServer-Inst.exe -acceptEULA -defaultInstance

        printf "# Setting up the SSH server to allow access..."
          $cfg = new-object -com "Bitvise.Bsscfg"
          $cfg.settings.SetDefaults()
          $cfg.settings.access.SetDefaults()
          $cfg.settings.access.winGroups.Clear()
          $cfg.settings.access.winGroups.new.SetDefaults()
          $cfg.settings.access.winGroups.new.loginAllowed = $true
          $cfg.settings.access.winGroups.new.term.initDir = "$env:WORK_DIR"
          $cfg.settings.access.winGroups.NewCommit()
          $cfg.settings.Save()
        printf " [DONE]\n\n"

        echo "# Add Firewall rule to allow inbound TCP connection on local port 22"
          New-NetFirewallRule -Name nps -DisplayName 'nps' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22

        echo "# Start the SSH server"
          net start BvSshServer

        echo "# Change the SSH user password"
          net user $env:UserName ${{ inputs.SSH_PASSWORD }}
          net user runner ${{ inputs.SSH_PASSWORD }} /add /Y
        
        #ssh 127.0.0.1 'ls'

      shell: pwsh
    - name: Start npc
      run: |
        printf "# Starting npc..."
        cd ~
        echo $(whoami)
        cat > npc.conf << EOF
        [common]
        server_addr=${{ inputs.NPS_SERVER }}
        conn_type=tcp
        vkey=${{ inputs.NPS_VKEY }}
        auto_reconnection=true
        max_conn=100
        flow_limit=1000
        rate_limit=1000
        crypt=true
        compress=true
        disconnect_timeout=600

        log_level=7

        [tcp]
        mode=tcp
        target_addr=127.0.0.1:22
        server_port=8080
        EOF

        ssh_user=$(whoami)
        npc_filename=npc
        npc_tar_filename=""
        if ${{ runner.os == 'Linux' }}; then
            if {{ matrix.platform.arch == 'mips-linux-gnu' }}; then
                npc_tar_filename=linux_mips_client.tar.gz
            elif {{ matrix.platform.arch == 'mipsel-linux-gnu' }}; then
                npc_tar_filename=linux_mipsle_client.tar.gz
            else
                npc_tar_filename=linux_amd64_client.tar.gz
            fi
        elif ${{ runner.os == 'macOS' }}; then
            npc_tar_filename=darwin_amd64_client.tar.gz
            ssh_user="root"
        elif ${{ runner.os == 'Windows' }}; then
            npc_filename=npc.exe
            npc_tar_filename=windows_amd64_client.tar.gz
        else
            echo "The runner os (${{ runner.os }}) is not supported"
            exit -1
        fi
        curl -v https://github.com/jinjiu/nps/releases/download/v1.6/$npc_tar_filename --output $npc_tar_filename -defaultInstance -X GET -L
        tar xvf $npc_tar_filename
        ls -lh
        ./$npc_filename -config ./npc.conf > ./npc.log &

        while true
        do
            sleep 5
            echo "-----------------------------------------------------------------------"
            echo "ssh user: $ssh_user"
            echo "-----------------------------------------------------------------------"
            cat npc.conf
            #curl -T ./npc.conf http://jinjiu.oss.aliyuncs.com
            cat ./npc.log
            sleep 20
        done
        printf " [DONE]\n\n"

        echo "# SSH session terminated. Allowing workflow to continue..."
      shell: bash
